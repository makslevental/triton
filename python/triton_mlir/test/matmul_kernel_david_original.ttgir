#blocked = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [8, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 8], order = [0, 1]}>
#mma = #ttg.amd_wmma<{version = 1, isTranspose = false, warpsPerCTA = [2, 4]}>
#shared = #ttg.swizzled_shared<{vec = 4, perPhase = 1, maxPhase = 16, order = [1, 0]}>
#shared1 = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0, 1]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 8 : i32, ttg.target = "hip:gfx1100", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @matmul_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32}, %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32}, %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32}, %arg8: i32 {tt.divisibility = 16 : i32}, %arg9: i32 {tt.divisibility = 16 : i32}, %arg10: i32 {tt.divisibility = 16 : i32}, %arg11: i32 {tt.divisibility = 16 : i32}, %arg12: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<256x256xf32, #mma>
    %true = arith.constant true
    %c1_i32 = arith.constant 1 : i32
    %c63_i32 = arith.constant 63 : i32
    %c64_i32 = arith.constant 64 : i32
    %c4_i32 = arith.constant 4 : i32
    %c256_i32 = arith.constant 256 : i32
    %c255_i32 = arith.constant 255 : i32
    %c2_i32 = arith.constant 2 : i32
    %c8_i32 = arith.constant 8 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.remsi %0, %c8_i32 : i32
    %2 = arith.divsi %0, %c8_i32 : i32
    %3 = arith.muli %1, %c2_i32 : i32
    %4 = arith.addi %3, %2 : i32
    %5 = arith.addi %arg4, %c255_i32 : i32
    %6 = arith.divsi %5, %c256_i32 : i32
    %7 = arith.muli %6, %c4_i32 : i32
    %8 = arith.divsi %4, %7 : i32
    %9 = arith.muli %8, %c4_i32 : i32
    %10 = arith.addi %arg3, %c255_i32 : i32
    %11 = arith.divsi %10, %c256_i32 : i32
    %12 = arith.subi %11, %9 : i32
    %13 = arith.minsi %12, %c4_i32 : i32
    %14 = arith.remsi %4, %13 : i32
    %15 = arith.addi %9, %14 : i32
    %16 = arith.muli %15, %c256_i32 : i32
    %17 = tt.splat %16 : i32 -> tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>>
    %18 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>>
    %19 = arith.addi %17, %18 : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>>
    %20 = tt.splat %arg3 : i32 -> tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>>
    %21 = arith.remsi %19, %20 : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>>
    %22 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>>
    %23 = tt.expand_dims %21 {axis = 1 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<256x1xi32, #blocked>
    %24 = tt.splat %arg6 : i32 -> tensor<256x1xi32, #blocked>
    %25 = arith.muli %23, %24 : tensor<256x1xi32, #blocked>
    %26 = tt.broadcast %25 : tensor<256x1xi32, #blocked> -> tensor<256x64xi32, #blocked>
    %27 = tt.expand_dims %22 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked>
    %28 = tt.broadcast %27 : tensor<1x64xi32, #blocked> -> tensor<256x64xi32, #blocked>
    %29 = arith.addi %26, %28 : tensor<256x64xi32, #blocked>
    %30 = tt.addptr %arg0, %c64_i32 : !tt.ptr<f16>, i32
    %31 = arith.addi %arg5, %c63_i32 : i32
    %32 = arith.divsi %31, %c64_i32 : i32
    %33 = arith.cmpi sgt, %32, %c0_i32 : i32
    %34 = tt.splat %33 : i1 -> tensor<256x64xi1, #blocked>
    %35 = amdgpu.buffer_load %arg0[%29], %34 stride = %arg6 {OpIdx = #amdgpu.OpIdx<0>} : tensor<256x64xf16, #blocked>
    %36 = arith.cmpi sgt, %32, %c1_i32 : i32
    %37 = tt.splat %36 : i1 -> tensor<256x64xi1, #blocked>
    %38 = amdgpu.buffer_load %30[%29], %37 stride = %arg6 {OpIdx = #amdgpu.OpIdx<0>} : tensor<256x64xf16, #blocked>
    %39 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>>
    %40 = arith.remsi %4, %7 : i32
    %41 = arith.divsi %40, %13 : i32
    %42 = arith.muli %41, %c256_i32 : i32
    %43 = tt.splat %42 : i32 -> tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>>
    %44 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>>
    %45 = arith.addi %43, %44 : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>>
    %46 = tt.splat %arg4 : i32 -> tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>>
    %47 = arith.remsi %45, %46 : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>>
    %48 = tt.expand_dims %39 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1>
    %49 = tt.broadcast %48 : tensor<64x1xi32, #blocked1> -> tensor<64x256xi32, #blocked1>
    %50 = tt.expand_dims %47 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1>
    %51 = tt.splat %arg7 : i32 -> tensor<1x256xi32, #blocked1>
    %52 = arith.muli %50, %51 : tensor<1x256xi32, #blocked1>
    %53 = tt.broadcast %52 : tensor<1x256xi32, #blocked1> -> tensor<64x256xi32, #blocked1>
    %54 = arith.addi %49, %53 : tensor<64x256xi32, #blocked1>
    %55 = tt.addptr %arg1, %c64_i32 : !tt.ptr<f16>, i32
    %56 = tt.splat %33 : i1 -> tensor<64x256xi1, #blocked1>
    %57 = amdgpu.buffer_load %arg1[%54], %56 stride = %arg7 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x256xf16, #blocked1>
    %58 = tt.splat %36 : i1 -> tensor<64x256xi1, #blocked1>
    %59 = amdgpu.buffer_load %55[%54], %58 stride = %arg7 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x256xf16, #blocked1>
    llvm.intr.assume %true : i1
    llvm.intr.assume %true : i1
    llvm.intr.assume %true : i1
    llvm.intr.assume %true : i1
    llvm.intr.assume %true : i1
    llvm.intr.assume %true : i1
    llvm.intr.assume %true : i1
    llvm.intr.assume %true : i1
    llvm.intr.assume %true : i1
    llvm.intr.assume %true : i1
    %60 = arith.cmpi sgt, %15, %c0_i32 : i32
    llvm.intr.assume %60 : i1
    %61 = arith.cmpi sgt, %41, %c0_i32 : i32
    llvm.intr.assume %61 : i1
    %62 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #mma}>>
    %63 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #mma}>>
    %64 = tt.splat %16 : i32 -> tensor<256xi32, #ttg.slice<{dim = 1, parent = #mma}>>
    %65 = arith.addi %64, %62 : tensor<256xi32, #ttg.slice<{dim = 1, parent = #mma}>>
    %66 = tt.splat %42 : i32 -> tensor<256xi32, #ttg.slice<{dim = 0, parent = #mma}>>
    %67 = arith.addi %66, %63 : tensor<256xi32, #ttg.slice<{dim = 0, parent = #mma}>>
    %68 = ttg.local_alloc : () -> !ttg.memdesc<1x256x64xf16, #shared, #smem, mutable>
    %69 = ttg.local_alloc : () -> !ttg.memdesc<1x64x256xf16, #shared1, #smem, mutable>
    %70 = ttg.memdesc_subview %68[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<1x256x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<256x64xf16, #shared, #smem, mutable>
    ttg.local_store %35, %70 {OpIdx = #amdgpu.OpIdx<0>} : tensor<256x64xf16, #blocked> -> !ttg.memdesc<256x64xf16, #shared, #smem, mutable>
    %71 = ttg.memdesc_subview %69[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x256xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x256xf16, #shared1, #smem, mutable>
    ttg.local_store %57, %71 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x256xf16, #blocked1> -> !ttg.memdesc<64x256xf16, #shared1, #smem, mutable>
    %72 = ttg.local_load %70 : !ttg.memdesc<256x64xf16, #shared, #smem, mutable> -> tensor<256x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>>
    %73 = ttg.local_load %71 : !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> -> tensor<64x256xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>>
    %74 = arith.subi %32, %c2_i32 : i32
    %75:8 = scf.for %arg13 = %c0_i32 to %74 step %c1_i32 iter_args(%arg14 = %cst, %arg15 = %30, %arg16 = %55, %arg17 = %c0_i32, %arg18 = %38, %arg19 = %59, %arg20 = %72, %arg21 = %73) -> (tensor<256x256xf32, #mma>, !tt.ptr<f16>, !tt.ptr<f16>, i32, tensor<256x64xf16, #blocked>, tensor<64x256xf16, #blocked1>, tensor<256x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>>, tensor<64x256xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>>)  : i32 {
      %109 = arith.addi %arg17, %c1_i32 : i32
      %110 = arith.cmpi slt, %109, %c1_i32 : i32
      %111 = arith.select %110, %109, %c0_i32 : i32
      %112 = ttg.memdesc_subview %68[%111, %c0_i32, %c0_i32] : !ttg.memdesc<1x256x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<256x64xf16, #shared, #smem, mutable>
      ttg.local_store %arg18, %112 {OpIdx = #amdgpu.OpIdx<0>} : tensor<256x64xf16, #blocked> -> !ttg.memdesc<256x64xf16, #shared, #smem, mutable>
      %113 = ttg.memdesc_subview %69[%111, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x256xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x256xf16, #shared1, #smem, mutable>
      ttg.local_store %arg19, %113 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x256xf16, #blocked1> -> !ttg.memdesc<64x256xf16, #shared1, #smem, mutable>
      %114 = tt.addptr %arg15, %c64_i32 : !tt.ptr<f16>, i32
      %115 = amdgpu.buffer_load %114[%29] stride = %arg6 {OpIdx = #amdgpu.OpIdx<0>} : tensor<256x64xf16, #blocked>
      %116 = tt.addptr %arg16, %c64_i32 : !tt.ptr<f16>, i32
      %117 = amdgpu.buffer_load %116[%54] stride = %arg7 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x256xf16, #blocked1>
      %118 = tt.dot %arg20, %arg21, %arg14 : tensor<256x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>> * tensor<64x256xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>> -> tensor<256x256xf32, #mma>
      %119 = ttg.local_load %112 : !ttg.memdesc<256x64xf16, #shared, #smem, mutable> -> tensor<256x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>>
      %120 = ttg.local_load %113 : !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> -> tensor<64x256xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>>
      scf.yield %118, %114, %116, %111, %115, %117, %119, %120 : tensor<256x256xf32, #mma>, !tt.ptr<f16>, !tt.ptr<f16>, i32, tensor<256x64xf16, #blocked>, tensor<64x256xf16, #blocked1>, tensor<256x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>>, tensor<64x256xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>>
    }
    %76 = arith.cmpi sge, %32, %c1_i32 : i32
    %77 = arith.cmpi sge, %32, %c2_i32 : i32
    %78 = arith.addi %75#3, %c1_i32 : i32
    %79 = arith.cmpi slt, %78, %c1_i32 : i32
    %80 = arith.select %79, %78, %c0_i32 : i32
    %81 = ttg.memdesc_subview %68[%80, %c0_i32, %c0_i32] : !ttg.memdesc<1x256x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<256x64xf16, #shared, #smem, mutable>
    ttg.local_store %75#4, %81 {OpIdx = #amdgpu.OpIdx<0>} : tensor<256x64xf16, #blocked> -> !ttg.memdesc<256x64xf16, #shared, #smem, mutable>
    %82 = ttg.memdesc_subview %69[%80, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x256xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x256xf16, #shared1, #smem, mutable>
    ttg.local_store %75#5, %82 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x256xf16, #blocked1> -> !ttg.memdesc<64x256xf16, #shared1, #smem, mutable>
    %83 = scf.if %76 -> (tensor<256x256xf32, #mma>) {
      %109 = tt.dot %75#6, %75#7, %75#0 : tensor<256x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>> * tensor<64x256xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>> -> tensor<256x256xf32, #mma>
      scf.yield %109 : tensor<256x256xf32, #mma>
    } else {
      scf.yield %75#0 : tensor<256x256xf32, #mma>
    }
    %84 = ttg.local_load %81 : !ttg.memdesc<256x64xf16, #shared, #smem, mutable> -> tensor<256x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>>
    %85 = ttg.local_load %82 : !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> -> tensor<64x256xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>>
    %86 = arith.select %76, %83, %75#0 : tensor<256x256xf32, #mma>
    %87 = scf.if %77 -> (tensor<256x256xf32, #mma>) {
      %109 = tt.dot %84, %85, %86 : tensor<256x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>> * tensor<64x256xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>> -> tensor<256x256xf32, #mma>
      scf.yield %109 : tensor<256x256xf32, #mma>
    } else {
      scf.yield %86 : tensor<256x256xf32, #mma>
    }
    %88 = arith.select %77, %87, %86 : tensor<256x256xf32, #mma>
    ttg.local_dealloc %68 : !ttg.memdesc<1x256x64xf16, #shared, #smem, mutable>
    ttg.local_dealloc %69 : !ttg.memdesc<1x64x256xf16, #shared1, #smem, mutable>
    %89 = arith.truncf %88 : tensor<256x256xf32, #mma> to tensor<256x256xf16, #mma>
    %90 = tt.expand_dims %65 {axis = 1 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<256x1xi32, #mma>
    %91 = tt.expand_dims %62 {axis = 1 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<256x1xi32, #mma>
    %92 = arith.muli %arg8, %16 : i32
    %93 = tt.splat %arg8 : i32 -> tensor<256x1xi32, #mma>
    %94 = arith.muli %93, %91 : tensor<256x1xi32, #mma>
    %95 = tt.addptr %arg2, %92 : !tt.ptr<f16>, i32
    %96 = tt.expand_dims %67 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x256xi32, #mma>
    %97 = tt.broadcast %94 : tensor<256x1xi32, #mma> -> tensor<256x256xi32, #mma>
    %98 = tt.expand_dims %63 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x256xi32, #mma>
    %99 = tt.broadcast %98 : tensor<1x256xi32, #mma> -> tensor<256x256xi32, #mma>
    %100 = tt.addptr %95, %42 : !tt.ptr<f16>, i32
    %101 = arith.addi %99, %97 : tensor<256x256xi32, #mma>
    %102 = tt.splat %arg3 : i32 -> tensor<256x1xi32, #mma>
    %103 = arith.cmpi slt, %90, %102 : tensor<256x1xi32, #mma>
    %104 = tt.splat %arg4 : i32 -> tensor<1x256xi32, #mma>
    %105 = arith.cmpi slt, %96, %104 : tensor<1x256xi32, #mma>
    %106 = tt.broadcast %103 : tensor<256x1xi1, #mma> -> tensor<256x256xi1, #mma>
    %107 = tt.broadcast %105 : tensor<1x256xi1, #mma> -> tensor<256x256xi1, #mma>
    %108 = arith.andi %106, %107 : tensor<256x256xi1, #mma>
    amdgpu.buffer_store %89, %100[%101], %108 stride = %arg8 : tensor<256x256xf16, #mma>
    tt.return
  }
}
