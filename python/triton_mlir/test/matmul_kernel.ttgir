#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 4], order = [0, 1]}>
#shared = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0, 1]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @matmul_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<8x8xf32, #blocked>
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<4x8xf32, #blocked1>
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<8x4xf32, #blocked2>
    %c0_i32 = arith.constant 0 : i32
    %c4_i32 = arith.constant 4 : i32
    %c3_i32 = arith.constant 3 : i32
    %c1_i32 = arith.constant 1 : i32
    %c8_i32 = arith.constant 8 : i32
    %c7_i32 = arith.constant 7 : i32
    %0 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<8x4x!tt.ptr<f32>, #blocked2>
    %1 = tt.get_program_id x : i32
    %2 = arith.addi %arg4, %c7_i32 : i32
    %3 = arith.divsi %2, %c8_i32 : i32
    %4 = arith.divsi %1, %3 : i32
    %5 = arith.remsi %1, %3 : i32
    %6 = arith.addi %arg3, %c7_i32 : i32
    %7 = arith.divsi %6, %c8_i32 : i32
    %8 = arith.subi %7, %4 : i32
    %9 = arith.minsi %8, %c1_i32 : i32
    %10 = arith.remsi %5, %9 : i32
    %11 = arith.addi %4, %10 : i32
    %12 = arith.muli %11, %c8_i32 : i32
    %13 = tt.splat %12 : i32 -> tensor<8xi32, #ttg.slice<{dim = 1, parent = #blocked2}>>
    %14 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 1, parent = #blocked2}>>
    %15 = arith.addi %13, %14 : tensor<8xi32, #ttg.slice<{dim = 1, parent = #blocked2}>>
    %16 = tt.splat %arg3 : i32 -> tensor<8xi32, #ttg.slice<{dim = 1, parent = #blocked2}>>
    %17 = arith.remsi %15, %16 : tensor<8xi32, #ttg.slice<{dim = 1, parent = #blocked2}>>
    %18 = tt.expand_dims %17 {axis = 1 : i32} : tensor<8xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<8x1xi32, #blocked2>
    %19 = tt.splat %arg6 : i32 -> tensor<8x1xi32, #blocked2>
    %20 = arith.muli %18, %19 : tensor<8x1xi32, #blocked2>
    %21 = tt.broadcast %20 : tensor<8x1xi32, #blocked2> -> tensor<8x4xi32, #blocked2>
    %22 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #ttg.slice<{dim = 0, parent = #blocked2}>>
    %23 = tt.expand_dims %22 {axis = 0 : i32} : tensor<4xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x4xi32, #blocked2>
    %24 = tt.splat %arg7 : i32 -> tensor<1x4xi32, #blocked2>
    %25 = arith.muli %23, %24 : tensor<1x4xi32, #blocked2>
    %26 = tt.broadcast %25 : tensor<1x4xi32, #blocked2> -> tensor<8x4xi32, #blocked2>
    %27 = arith.addi %21, %26 : tensor<8x4xi32, #blocked2>
    %28 = tt.addptr %0, %27 : tensor<8x4x!tt.ptr<f32>, #blocked2>, tensor<8x4xi32, #blocked2>
    %29 = arith.addi %arg5, %c3_i32 : i32
    %30 = arith.divsi %29, %c4_i32 : i32
    %31 = arith.cmpi sgt, %30, %c0_i32 : i32
    %32 = tt.splat %31 : i1 -> tensor<8x4xi1, #blocked2>
    %33 = tt.splat %arg5 : i32 -> tensor<1x4xi32, #blocked2>
    %34 = arith.cmpi slt, %23, %33 : tensor<1x4xi32, #blocked2>
    %35 = tt.broadcast %34 : tensor<1x4xi1, #blocked2> -> tensor<8x4xi1, #blocked2>
    %36 = arith.andi %32, %35 : tensor<8x4xi1, #blocked2>
    %37 = tt.load %28, %36, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<8x4x!tt.ptr<f32>, #blocked2>
    %38 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<4x8x!tt.ptr<f32>, #blocked1>
    %39 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #ttg.slice<{dim = 1, parent = #blocked1}>>
    %40 = tt.expand_dims %39 {axis = 1 : i32} : tensor<4xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<4x1xi32, #blocked1>
    %41 = tt.splat %arg8 : i32 -> tensor<4x1xi32, #blocked1>
    %42 = arith.muli %40, %41 : tensor<4x1xi32, #blocked1>
    %43 = tt.broadcast %42 : tensor<4x1xi32, #blocked1> -> tensor<4x8xi32, #blocked1>
    %44 = arith.divsi %5, %9 : i32
    %45 = arith.muli %44, %c8_i32 : i32
    %46 = tt.splat %45 : i32 -> tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked1}>>
    %47 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked1}>>
    %48 = arith.addi %46, %47 : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked1}>>
    %49 = tt.splat %arg4 : i32 -> tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked1}>>
    %50 = arith.remsi %48, %49 : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked1}>>
    %51 = tt.expand_dims %50 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x8xi32, #blocked1>
    %52 = tt.splat %arg9 : i32 -> tensor<1x8xi32, #blocked1>
    %53 = arith.muli %51, %52 : tensor<1x8xi32, #blocked1>
    %54 = tt.broadcast %53 : tensor<1x8xi32, #blocked1> -> tensor<4x8xi32, #blocked1>
    %55 = arith.addi %43, %54 : tensor<4x8xi32, #blocked1>
    %56 = tt.addptr %38, %55 : tensor<4x8x!tt.ptr<f32>, #blocked1>, tensor<4x8xi32, #blocked1>
    %57 = tt.splat %31 : i1 -> tensor<4x8xi1, #blocked1>
    %58 = tt.splat %arg5 : i32 -> tensor<4x1xi32, #blocked1>
    %59 = arith.cmpi slt, %40, %58 : tensor<4x1xi32, #blocked1>
    %60 = tt.broadcast %59 : tensor<4x1xi1, #blocked1> -> tensor<4x8xi1, #blocked1>
    %61 = arith.andi %57, %60 : tensor<4x8xi1, #blocked1>
    %62 = tt.load %56, %61, %cst_0 {OpIdx = #amdgpu.OpIdx<1>} : tensor<4x8x!tt.ptr<f32>, #blocked1>
    %63 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked2}>>
    %64 = tt.splat %45 : i32 -> tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked2}>>
    %65 = arith.addi %64, %63 : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked2}>>
    %66 = arith.muli %arg7, %c4_i32 : i32
    %67 = tt.splat %66 : i32 -> tensor<8x4xi32, #blocked2>
    %68 = arith.muli %arg8, %c4_i32 : i32
    %69 = tt.splat %68 : i32 -> tensor<4x8xi32, #blocked1>
    %70 = ttg.local_alloc  : () -> !ttg.memdesc<1x8x4xf32, #shared, #smem, mutable>
    %71 = ttg.local_alloc  : () -> !ttg.memdesc<1x4x8xf32, #shared, #smem, mutable>
    %72 = ttg.memdesc_subview %70[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<1x8x4xf32, #shared, #smem, mutable> -> !ttg.memdesc<8x4xf32, #shared, #smem, mutable>
    ttg.local_store %37, %72 {OpIdx = #amdgpu.OpIdx<0>} : tensor<8x4xf32, #blocked2> -> !ttg.memdesc<8x4xf32, #shared, #smem, mutable>
    %73 = ttg.memdesc_subview %71[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<1x4x8xf32, #shared, #smem, mutable> -> !ttg.memdesc<4x8xf32, #shared, #smem, mutable>
    ttg.local_store %62, %73 {OpIdx = #amdgpu.OpIdx<1>} : tensor<4x8xf32, #blocked1> -> !ttg.memdesc<4x8xf32, #shared, #smem, mutable>
    %74 = arith.subi %30, %c1_i32 : i32
    %75:6 = scf.for %arg12 = %c0_i32 to %74 step %c1_i32 iter_args(%arg13 = %cst, %arg14 = %28, %arg15 = %56, %arg16 = %c0_i32, %arg17 = %72, %arg18 = %73) -> (tensor<8x8xf32, #blocked>, tensor<8x4x!tt.ptr<f32>, #blocked2>, tensor<4x8x!tt.ptr<f32>, #blocked1>, i32, !ttg.memdesc<8x4xf32, #shared, #smem, mutable>, !ttg.memdesc<4x8xf32, #shared, #smem, mutable>)  : i32 {
      %100 = tt.addptr %arg14, %67 : tensor<8x4x!tt.ptr<f32>, #blocked2>, tensor<8x4xi32, #blocked2>
      %101 = arith.addi %arg12, %c1_i32 : i32
      %102 = arith.muli %101, %c4_i32 : i32
      %103 = arith.subi %arg5, %102 : i32
      %104 = tt.splat %103 : i32 -> tensor<1x4xi32, #blocked2>
      %105 = arith.cmpi slt, %23, %104 : tensor<1x4xi32, #blocked2>
      %106 = tt.broadcast %105 : tensor<1x4xi1, #blocked2> -> tensor<8x4xi1, #blocked2>
      %107 = tt.load %100, %106, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<8x4x!tt.ptr<f32>, #blocked2>
      %108 = tt.addptr %arg15, %69 : tensor<4x8x!tt.ptr<f32>, #blocked1>, tensor<4x8xi32, #blocked1>
      %109 = tt.splat %103 : i32 -> tensor<4x1xi32, #blocked1>
      %110 = arith.cmpi slt, %40, %109 : tensor<4x1xi32, #blocked1>
      %111 = tt.broadcast %110 : tensor<4x1xi1, #blocked1> -> tensor<4x8xi1, #blocked1>
      %112 = tt.load %108, %111, %cst_0 {OpIdx = #amdgpu.OpIdx<1>} : tensor<4x8x!tt.ptr<f32>, #blocked1>
      %113 = ttg.local_load %arg17 : !ttg.memdesc<8x4xf32, #shared, #smem, mutable> -> tensor<8x4xf32, #ttg.dot_op<{opIdx = 0, parent = #blocked}>>
      %114 = ttg.local_load %arg18 : !ttg.memdesc<4x8xf32, #shared, #smem, mutable> -> tensor<4x8xf32, #ttg.dot_op<{opIdx = 1, parent = #blocked}>>
      %115 = tt.dot %113, %114, %arg13 : tensor<8x4xf32, #ttg.dot_op<{opIdx = 0, parent = #blocked}>> * tensor<4x8xf32, #ttg.dot_op<{opIdx = 1, parent = #blocked}>> -> tensor<8x8xf32, #blocked>
      %116 = arith.addi %arg16, %c1_i32 : i32
      %117 = arith.cmpi slt, %116, %c1_i32 : i32
      %118 = arith.select %117, %116, %c0_i32 : i32
      %119 = ttg.memdesc_subview %70[%118, %c0_i32, %c0_i32] : !ttg.memdesc<1x8x4xf32, #shared, #smem, mutable> -> !ttg.memdesc<8x4xf32, #shared, #smem, mutable>
      ttg.local_store %107, %119 {OpIdx = #amdgpu.OpIdx<0>} : tensor<8x4xf32, #blocked2> -> !ttg.memdesc<8x4xf32, #shared, #smem, mutable>
      %120 = ttg.memdesc_subview %71[%118, %c0_i32, %c0_i32] : !ttg.memdesc<1x4x8xf32, #shared, #smem, mutable> -> !ttg.memdesc<4x8xf32, #shared, #smem, mutable>
      ttg.local_store %112, %120 {OpIdx = #amdgpu.OpIdx<1>} : tensor<4x8xf32, #blocked1> -> !ttg.memdesc<4x8xf32, #shared, #smem, mutable>
      scf.yield %115, %100, %108, %118, %119, %120 : tensor<8x8xf32, #blocked>, tensor<8x4x!tt.ptr<f32>, #blocked2>, tensor<4x8x!tt.ptr<f32>, #blocked1>, i32, !ttg.memdesc<8x4xf32, #shared, #smem, mutable>, !ttg.memdesc<4x8xf32, #shared, #smem, mutable>
    }
    %76 = arith.cmpi sge, %30, %c1_i32 : i32
    %77 = ttg.local_load %75#4 : !ttg.memdesc<8x4xf32, #shared, #smem, mutable> -> tensor<8x4xf32, #ttg.dot_op<{opIdx = 0, parent = #blocked}>>
    %78 = ttg.local_load %75#5 : !ttg.memdesc<4x8xf32, #shared, #smem, mutable> -> tensor<4x8xf32, #ttg.dot_op<{opIdx = 1, parent = #blocked}>>
    %79 = scf.if %76 -> (tensor<8x8xf32, #blocked>) {
      %100 = tt.dot %77, %78, %75#0 : tensor<8x4xf32, #ttg.dot_op<{opIdx = 0, parent = #blocked}>> * tensor<4x8xf32, #ttg.dot_op<{opIdx = 1, parent = #blocked}>> -> tensor<8x8xf32, #blocked>
      scf.yield %100 : tensor<8x8xf32, #blocked>
    } else {
      scf.yield %75#0 : tensor<8x8xf32, #blocked>
    }
    %80 = arith.select %76, %79, %75#0 : tensor<8x8xf32, #blocked>
    ttg.local_dealloc %70 : !ttg.memdesc<1x8x4xf32, #shared, #smem, mutable>
    ttg.local_dealloc %71 : !ttg.memdesc<1x4x8xf32, #shared, #smem, mutable>
    %81 = tt.expand_dims %15 {axis = 1 : i32} : tensor<8xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<8x1xi32, #blocked2>
    %82 = tt.splat %arg10 : i32 -> tensor<8x1xi32, #blocked2>
    %83 = arith.muli %82, %81 : tensor<8x1xi32, #blocked2>
    %84 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked2>
    %85 = tt.addptr %84, %83 : tensor<8x1x!tt.ptr<f32>, #blocked2>, tensor<8x1xi32, #blocked2>
    %86 = tt.expand_dims %65 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x8xi32, #blocked2>
    %87 = tt.splat %arg11 : i32 -> tensor<1x8xi32, #blocked2>
    %88 = arith.muli %87, %86 : tensor<1x8xi32, #blocked2>
    %89 = tt.broadcast %85 : tensor<8x1x!tt.ptr<f32>, #blocked2> -> tensor<8x8x!tt.ptr<f32>, #blocked2>
    %90 = tt.broadcast %88 : tensor<1x8xi32, #blocked2> -> tensor<8x8xi32, #blocked2>
    %91 = tt.addptr %89, %90 : tensor<8x8x!tt.ptr<f32>, #blocked2>, tensor<8x8xi32, #blocked2>
    %92 = tt.splat %arg3 : i32 -> tensor<8x1xi32, #blocked2>
    %93 = arith.cmpi slt, %81, %92 : tensor<8x1xi32, #blocked2>
    %94 = tt.splat %arg4 : i32 -> tensor<1x8xi32, #blocked2>
    %95 = arith.cmpi slt, %86, %94 : tensor<1x8xi32, #blocked2>
    %96 = tt.broadcast %93 : tensor<8x1xi1, #blocked2> -> tensor<8x8xi1, #blocked2>
    %97 = tt.broadcast %95 : tensor<1x8xi1, #blocked2> -> tensor<8x8xi1, #blocked2>
    %98 = arith.andi %96, %97 : tensor<8x8xi1, #blocked2>
    %99 = ttg.convert_layout %80 : tensor<8x8xf32, #blocked> -> tensor<8x8xf32, #blocked2>
    tt.store %91, %99, %98 : tensor<8x8x!tt.ptr<f32>, #blocked2>
    tt.return
  }
}
