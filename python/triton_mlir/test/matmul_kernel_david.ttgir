#blocked = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 4], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [8, 1], threadsPerWarp = [4, 8], warpsPerCTA = [1, 8], order = [0, 1]}>
#mma = #ttg.amd_wmma<{version = 1, isTranspose = false, warpsPerCTA = [2, 4]}>
#shared = #ttg.swizzled_shared<{vec = 4, perPhase = 2, maxPhase = 8, order = [1, 0]}>
#shared1 = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0, 1]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 8 : i32, ttg.target = "hip:gfx1100", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @matmul_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32}, %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32}, %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32}, %arg8: i32 {tt.divisibility = 16 : i32}, %arg9: i32 {tt.divisibility = 16 : i32}, %arg10: i32 {tt.divisibility = 16 : i32}, %arg11: i32 {tt.divisibility = 16 : i32}, %arg12: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<128x128xf32, #mma>
    %true = arith.constant true
    %c2_i32 = arith.constant 2 : i32
    %c1_i32 = arith.constant 1 : i32
    %c31_i32 = arith.constant 31 : i32
    %c32_i32 = arith.constant 32 : i32
    %c128_i32 = arith.constant 128 : i32
    %c127_i32 = arith.constant 127 : i32
    %c8_i32 = arith.constant 8 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.remsi %0, %c8_i32 : i32
    %2 = arith.divsi %0, %c8_i32 : i32
    %3 = arith.muli %1, %c8_i32 : i32
    %4 = arith.addi %3, %2 : i32
    %5 = arith.addi %arg4, %c127_i32 : i32
    %6 = arith.divsi %5, %c128_i32 : i32
    %7 = arith.divsi %4, %6 : i32
    %8 = arith.muli %7, %c128_i32 : i32
    %9 = tt.splat %8 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>>
    %10 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>>
    %11 = arith.addi %9, %10 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>>
    %12 = tt.splat %arg3 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>>
    %13 = arith.remsi %11, %12 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>>
    %14 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>>
    %15 = tt.expand_dims %13 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi32, #blocked>
    %16 = tt.splat %arg6 : i32 -> tensor<128x1xi32, #blocked>
    %17 = arith.muli %15, %16 : tensor<128x1xi32, #blocked>
    %18 = tt.broadcast %17 : tensor<128x1xi32, #blocked> -> tensor<128x32xi32, #blocked>
    %19 = tt.expand_dims %14 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked>
    %20 = tt.broadcast %19 : tensor<1x32xi32, #blocked> -> tensor<128x32xi32, #blocked>
    %21 = arith.addi %18, %20 : tensor<128x32xi32, #blocked>
    %22 = tt.addptr %arg0, %c32_i32 : !tt.ptr<f16>, i32
    %23 = arith.addi %arg5, %c31_i32 : i32
    %24 = arith.divsi %23, %c32_i32 : i32
    %25 = arith.cmpi sgt, %24, %c0_i32 : i32
    %26 = tt.splat %25 : i1 -> tensor<128x32xi1, #blocked>
    %27 = amdgpu.buffer_load %arg0[%21], %26 stride = %arg6 {OpIdx = #amdgpu.OpIdx<0>} : tensor<128x32xf16, #blocked>
    %28 = arith.cmpi sgt, %24, %c1_i32 : i32
    %29 = tt.splat %28 : i1 -> tensor<128x32xi1, #blocked>
    %30 = amdgpu.buffer_load %22[%21], %29 stride = %arg6 {OpIdx = #amdgpu.OpIdx<0>} : tensor<128x32xf16, #blocked>
    %31 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>>
    %32 = arith.remsi %4, %6 : i32
    %33 = arith.muli %32, %c128_i32 : i32
    %34 = tt.splat %33 : i32 -> tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked1}>>
    %35 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked1}>>
    %36 = arith.addi %34, %35 : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked1}>>
    %37 = tt.splat %arg4 : i32 -> tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked1}>>
    %38 = arith.remsi %36, %37 : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked1}>>
    %39 = tt.expand_dims %31 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1>
    %40 = tt.broadcast %39 : tensor<32x1xi32, #blocked1> -> tensor<32x128xi32, #blocked1>
    %41 = tt.expand_dims %38 {axis = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x128xi32, #blocked1>
    %42 = tt.splat %arg7 : i32 -> tensor<1x128xi32, #blocked1>
    %43 = arith.muli %41, %42 : tensor<1x128xi32, #blocked1>
    %44 = tt.broadcast %43 : tensor<1x128xi32, #blocked1> -> tensor<32x128xi32, #blocked1>
    %45 = arith.addi %40, %44 : tensor<32x128xi32, #blocked1>
    %46 = tt.addptr %arg1, %c32_i32 : !tt.ptr<f16>, i32
    %47 = tt.splat %25 : i1 -> tensor<32x128xi1, #blocked1>
    %48 = amdgpu.buffer_load %arg1[%45], %47 stride = %arg7 {OpIdx = #amdgpu.OpIdx<1>} : tensor<32x128xf16, #blocked1>
    %49 = tt.splat %28 : i1 -> tensor<32x128xi1, #blocked1>
    %50 = amdgpu.buffer_load %46[%45], %49 stride = %arg7 {OpIdx = #amdgpu.OpIdx<1>} : tensor<32x128xf16, #blocked1>
    llvm.intr.assume %true : i1
    llvm.intr.assume %true : i1
    llvm.intr.assume %true : i1
    llvm.intr.assume %true : i1
    llvm.intr.assume %true : i1
    llvm.intr.assume %true : i1
    llvm.intr.assume %true : i1
    llvm.intr.assume %true : i1
    llvm.intr.assume %true : i1
    llvm.intr.assume %true : i1
    %51 = arith.cmpi sgt, %7, %c0_i32 : i32
    llvm.intr.assume %51 : i1
    %52 = arith.cmpi sgt, %32, %c0_i32 : i32
    llvm.intr.assume %52 : i1
    %53 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #mma}>>
    %54 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #mma}>>
    %55 = tt.splat %8 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #mma}>>
    %56 = arith.addi %55, %53 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #mma}>>
    %57 = tt.splat %33 : i32 -> tensor<128xi32, #ttg.slice<{dim = 0, parent = #mma}>>
    %58 = arith.addi %57, %54 : tensor<128xi32, #ttg.slice<{dim = 0, parent = #mma}>>
    %59 = ttg.local_alloc : () -> !ttg.memdesc<2x128x32xf16, #shared, #smem, mutable>
    %60 = ttg.local_alloc : () -> !ttg.memdesc<2x32x128xf16, #shared1, #smem, mutable>
    %61 = ttg.memdesc_subview %59[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x32xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x32xf16, #shared, #smem, mutable>
    ttg.local_store %27, %61 {OpIdx = #amdgpu.OpIdx<0>} : tensor<128x32xf16, #blocked> -> !ttg.memdesc<128x32xf16, #shared, #smem, mutable>
    %62 = ttg.memdesc_subview %60[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x32x128xf16, #shared1, #smem, mutable> -> !ttg.memdesc<32x128xf16, #shared1, #smem, mutable>
    ttg.local_store %48, %62 {OpIdx = #amdgpu.OpIdx<1>} : tensor<32x128xf16, #blocked1> -> !ttg.memdesc<32x128xf16, #shared1, #smem, mutable>
    %63 = ttg.memdesc_subview %59[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x32xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x32xf16, #shared, #smem, mutable>
    ttg.local_store %30, %63 {OpIdx = #amdgpu.OpIdx<0>} : tensor<128x32xf16, #blocked> -> !ttg.memdesc<128x32xf16, #shared, #smem, mutable>
    %64 = ttg.memdesc_subview %60[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x32x128xf16, #shared1, #smem, mutable> -> !ttg.memdesc<32x128xf16, #shared1, #smem, mutable>
    ttg.local_store %50, %64 {OpIdx = #amdgpu.OpIdx<1>} : tensor<32x128xf16, #blocked1> -> !ttg.memdesc<32x128xf16, #shared1, #smem, mutable>
    %65 = arith.subi %24, %c2_i32 : i32
    %66:8 = scf.for %arg13 = %c0_i32 to %65 step %c1_i32 iter_args(%arg14 = %cst, %arg15 = %22, %arg16 = %46, %arg17 = %c1_i32, %arg18 = %61, %arg19 = %63, %arg20 = %62, %arg21 = %64) -> (tensor<128x128xf32, #mma>, !tt.ptr<f16>, !tt.ptr<f16>, i32, !ttg.memdesc<128x32xf16, #shared, #smem, mutable>, !ttg.memdesc<128x32xf16, #shared, #smem, mutable>, !ttg.memdesc<32x128xf16, #shared1, #smem, mutable>, !ttg.memdesc<32x128xf16, #shared1, #smem, mutable>)  : i32 {
      %97 = tt.addptr %arg15, %c32_i32 : !tt.ptr<f16>, i32
      %98 = amdgpu.buffer_load %97[%21] stride = %arg6 {OpIdx = #amdgpu.OpIdx<0>} : tensor<128x32xf16, #blocked>
      %99 = tt.addptr %arg16, %c32_i32 : !tt.ptr<f16>, i32
      %100 = amdgpu.buffer_load %99[%45] stride = %arg7 {OpIdx = #amdgpu.OpIdx<1>} : tensor<32x128xf16, #blocked1>
      %101 = ttg.local_load %arg18 : !ttg.memdesc<128x32xf16, #shared, #smem, mutable> -> tensor<128x32xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>>
      %102 = ttg.local_load %arg20 : !ttg.memdesc<32x128xf16, #shared1, #smem, mutable> -> tensor<32x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>>
      %103 = tt.dot %101, %102, %arg14 : tensor<128x32xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>> * tensor<32x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>> -> tensor<128x128xf32, #mma>
      %104 = arith.addi %arg17, %c1_i32 : i32
      %105 = arith.cmpi slt, %104, %c2_i32 : i32
      %106 = arith.select %105, %104, %c0_i32 : i32
      %107 = ttg.memdesc_subview %59[%106, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x32xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x32xf16, #shared, #smem, mutable>
      ttg.local_store %98, %107 {OpIdx = #amdgpu.OpIdx<0>} : tensor<128x32xf16, #blocked> -> !ttg.memdesc<128x32xf16, #shared, #smem, mutable>
      %108 = ttg.memdesc_subview %60[%106, %c0_i32, %c0_i32] : !ttg.memdesc<2x32x128xf16, #shared1, #smem, mutable> -> !ttg.memdesc<32x128xf16, #shared1, #smem, mutable>
      ttg.local_store %100, %108 {OpIdx = #amdgpu.OpIdx<1>} : tensor<32x128xf16, #blocked1> -> !ttg.memdesc<32x128xf16, #shared1, #smem, mutable>
      scf.yield %103, %97, %99, %106, %arg19, %107, %arg21, %108 : tensor<128x128xf32, #mma>, !tt.ptr<f16>, !tt.ptr<f16>, i32, !ttg.memdesc<128x32xf16, #shared, #smem, mutable>, !ttg.memdesc<128x32xf16, #shared, #smem, mutable>, !ttg.memdesc<32x128xf16, #shared1, #smem, mutable>, !ttg.memdesc<32x128xf16, #shared1, #smem, mutable>
    }
    %67 = arith.cmpi sge, %24, %c1_i32 : i32
    %68 = arith.cmpi sge, %24, %c2_i32 : i32
    %69 = ttg.local_load %66#4 : !ttg.memdesc<128x32xf16, #shared, #smem, mutable> -> tensor<128x32xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>>
    %70 = ttg.local_load %66#6 : !ttg.memdesc<32x128xf16, #shared1, #smem, mutable> -> tensor<32x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>>
    %71 = scf.if %67 -> (tensor<128x128xf32, #mma>) {
      %97 = tt.dot %69, %70, %66#0 : tensor<128x32xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>> * tensor<32x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>> -> tensor<128x128xf32, #mma>
      scf.yield %97 : tensor<128x128xf32, #mma>
    } else {
      scf.yield %66#0 : tensor<128x128xf32, #mma>
    }
    %72 = arith.select %67, %71, %66#0 : tensor<128x128xf32, #mma>
    %73 = ttg.local_load %66#5 : !ttg.memdesc<128x32xf16, #shared, #smem, mutable> -> tensor<128x32xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>>
    %74 = ttg.local_load %66#7 : !ttg.memdesc<32x128xf16, #shared1, #smem, mutable> -> tensor<32x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>>
    %75 = scf.if %68 -> (tensor<128x128xf32, #mma>) {
      %97 = tt.dot %73, %74, %72 : tensor<128x32xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>> * tensor<32x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>> -> tensor<128x128xf32, #mma>
      scf.yield %97 : tensor<128x128xf32, #mma>
    } else {
      scf.yield %72 : tensor<128x128xf32, #mma>
    }
    %76 = arith.select %68, %75, %72 : tensor<128x128xf32, #mma>
    ttg.local_dealloc %59 : !ttg.memdesc<2x128x32xf16, #shared, #smem, mutable>
    ttg.local_dealloc %60 : !ttg.memdesc<2x32x128xf16, #shared1, #smem, mutable>
    %77 = arith.truncf %76 : tensor<128x128xf32, #mma> to tensor<128x128xf16, #mma>
    %78 = tt.expand_dims %56 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<128x1xi32, #mma>
    %79 = tt.expand_dims %53 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<128x1xi32, #mma>
    %80 = arith.muli %arg8, %8 : i32
    %81 = tt.splat %arg8 : i32 -> tensor<128x1xi32, #mma>
    %82 = arith.muli %81, %79 : tensor<128x1xi32, #mma>
    %83 = tt.addptr %arg2, %80 : !tt.ptr<f16>, i32
    %84 = tt.expand_dims %58 {axis = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x128xi32, #mma>
    %85 = tt.broadcast %82 : tensor<128x1xi32, #mma> -> tensor<128x128xi32, #mma>
    %86 = tt.expand_dims %54 {axis = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x128xi32, #mma>
    %87 = tt.broadcast %86 : tensor<1x128xi32, #mma> -> tensor<128x128xi32, #mma>
    %88 = tt.addptr %83, %33 : !tt.ptr<f16>, i32
    %89 = arith.addi %87, %85 : tensor<128x128xi32, #mma>
    %90 = tt.splat %arg3 : i32 -> tensor<128x1xi32, #mma>
    %91 = arith.cmpi slt, %78, %90 : tensor<128x1xi32, #mma>
    %92 = tt.splat %arg4 : i32 -> tensor<1x128xi32, #mma>
    %93 = arith.cmpi slt, %84, %92 : tensor<1x128xi32, #mma>
    %94 = tt.broadcast %91 : tensor<128x1xi1, #mma> -> tensor<128x128xi1, #mma>
    %95 = tt.broadcast %93 : tensor<1x128xi1, #mma> -> tensor<128x128xi1, #mma>
    %96 = arith.andi %94, %95 : tensor<128x128xi1, #mma>
    amdgpu.buffer_store %77, %88[%89], %96 stride = %arg8 : tensor<128x128xf16, #mma>
    tt.return
  }
}
