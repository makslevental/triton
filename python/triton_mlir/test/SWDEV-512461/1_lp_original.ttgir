#blocked = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [8, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":72:0)
#mma = #ttg.amd_mfma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
#shared = #ttg.shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [1, 0], hasLeadingOffset = false}>
#shared1 = #ttg.shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [0, 1], hasLeadingOffset = false}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx942", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":72:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":72:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":72:0), %arg3: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":72:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":72:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":72:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":72:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":72:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":72:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":72:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":72:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<256x256xf32, #mma> loc(#loc1)
    %true = arith.constant true loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c255_i32 = arith.constant 255 : i32 loc(#loc1)
    %c76_i32 = arith.constant 76 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.remsi %0, %c8_i32 : i32 loc(#loc3)
    %2 = arith.muli %1, %c76_i32 : i32 loc(#loc4)
    %3 = arith.divsi %0, %c8_i32 : i32 loc(#loc5)
    %4 = arith.addi %2, %3 : i32 loc(#loc6)
    %5 = arith.addi %arg5, %c255_i32 : i32 loc(#loc56)
    %6 = arith.divsi %5, %c256_i32 : i32 loc(#loc57)
    %7 = arith.muli %6, %c4_i32 : i32 loc(#loc10)
    %8 = arith.divsi %4, %7 : i32 loc(#loc11)
    %9 = arith.muli %8, %c4_i32 : i32 loc(#loc12)
    %10 = arith.remsi %4, %7 : i32 loc(#loc13)
    %11 = arith.addi %arg4, %c255_i32 : i32 loc(#loc58)
    %12 = arith.divsi %11, %c256_i32 : i32 loc(#loc59)
    %13 = arith.subi %12, %9 : i32 loc(#loc15)
    %14 = arith.minsi %13, %c4_i32 : i32 loc(#loc16)
    %15 = arith.remsi %10, %14 : i32 loc(#loc17)
    %16 = arith.addi %9, %15 : i32 loc(#loc18)
    %17 = arith.muli %16, %c256_i32 : i32 loc(#loc19)
    %18 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc20)
    %19 = tt.expand_dims %18 {axis = 1 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<256x1xi32, #blocked> loc(#loc21)
    %20 = arith.muli %17, %arg7 : i32 loc(#loc21)
    %21 = tt.splat %arg7 : i32 -> tensor<256x1xi32, #blocked> loc(#loc21)
    %22 = arith.muli %19, %21 : tensor<256x1xi32, #blocked> loc(#loc21)
    %23 = tt.addptr %arg0, %20 : !tt.ptr<f16>, i32 loc(#loc21)
    %24 = tt.broadcast %22 : tensor<256x1xi32, #blocked> -> tensor<256x64xi32, #blocked> loc(#loc22)
    %25 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc23)
    %26 = tt.expand_dims %25 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc22)
    %27 = tt.broadcast %26 : tensor<1x64xi32, #blocked> -> tensor<256x64xi32, #blocked> loc(#loc22)
    %28 = arith.addi %27, %24 : tensor<256x64xi32, #blocked> loc(#loc22)
    %29 = tt.addptr %23, %c64_i32 : !tt.ptr<f16>, i32 loc(#loc24)
    %30 = arith.addi %arg6, %c63_i32 : i32 loc(#loc60)
    %31 = arith.divsi %30, %c64_i32 : i32 loc(#loc61)
    %32 = arith.cmpi sgt, %31, %c0_i32 : i32 loc(#loc26)
    %33 = tt.splat %32 : i1 -> tensor<256x64xi1, #blocked> loc(#loc26)
    %34 = amdgpu.buffer_load %23[%28], %33 {OpIdx = #amdgpu.OpIdx<0>} : tensor<256x64xf16, #blocked> loc(#loc27)
    %35 = arith.cmpi sgt, %31, %c1_i32 : i32 loc(#loc26)
    %36 = tt.splat %35 : i1 -> tensor<256x64xi1, #blocked> loc(#loc26)
    %37 = amdgpu.buffer_load %29[%28], %36 {OpIdx = #amdgpu.OpIdx<0>} : tensor<256x64xf16, #blocked> loc(#loc27)
    %38 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc28)
    %39 = tt.expand_dims %38 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc29)
    %40 = tt.broadcast %39 : tensor<64x1xi32, #blocked1> -> tensor<64x256xi32, #blocked1> loc(#loc30)
    %41 = arith.divsi %10, %14 : i32 loc(#loc31)
    %42 = arith.muli %41, %c256_i32 : i32 loc(#loc32)
    %43 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc20)
    %44 = tt.expand_dims %43 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc30)
    %45 = arith.muli %42, %arg8 : i32 loc(#loc30)
    %46 = tt.splat %arg8 : i32 -> tensor<1x256xi32, #blocked1> loc(#loc30)
    %47 = arith.muli %44, %46 : tensor<1x256xi32, #blocked1> loc(#loc30)
    %48 = tt.broadcast %47 : tensor<1x256xi32, #blocked1> -> tensor<64x256xi32, #blocked1> loc(#loc30)
    %49 = tt.addptr %arg1, %45 : !tt.ptr<f16>, i32 loc(#loc30)
    %50 = arith.addi %48, %40 : tensor<64x256xi32, #blocked1> loc(#loc30)
    %51 = tt.addptr %49, %c64_i32 : !tt.ptr<f16>, i32 loc(#loc33)
    %52 = tt.splat %32 : i1 -> tensor<64x256xi1, #blocked1> loc(#loc26)
    %53 = amdgpu.buffer_load %49[%50], %52 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x256xf16, #blocked1> loc(#loc34)
    %54 = tt.splat %35 : i1 -> tensor<64x256xi1, #blocked1> loc(#loc26)
    %55 = amdgpu.buffer_load %51[%50], %54 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x256xf16, #blocked1> loc(#loc34)
    %56 = arith.cmpi sgt, %arg7, %c0_i32 : i32 loc(#loc35)
    llvm.intr.assume %56 : i1 loc(#loc36)
    llvm.intr.assume %true : i1 loc(#loc37)
    llvm.intr.assume %true : i1 loc(#loc38)
    %57 = arith.cmpi sgt, %arg8, %c0_i32 : i32 loc(#loc39)
    llvm.intr.assume %57 : i1 loc(#loc40)
    %58 = arith.cmpi sgt, %arg9, %c0_i32 : i32 loc(#loc41)
    llvm.intr.assume %58 : i1 loc(#loc42)
    llvm.intr.assume %true : i1 loc(#loc43)
    %59 = arith.cmpi sgt, %arg10, %c0_i32 : i32 loc(#loc44)
    llvm.intr.assume %59 : i1 loc(#loc45)
    %60 = arith.cmpi sgt, %16, %c0_i32 : i32 loc(#loc46)
    llvm.intr.assume %60 : i1 loc(#loc47)
    %61 = arith.cmpi sgt, %41, %c0_i32 : i32 loc(#loc48)
    llvm.intr.assume %61 : i1 loc(#loc49)
    %62 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc20)
    %63 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc20)
    %64 = tt.expand_dims %62 {axis = 1 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<256x1xi32, #mma> loc(#loc50)
    %65 = tt.expand_dims %63 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x256xi32, #mma> loc(#loc51)
    %66 = ttg.local_alloc  : () -> !ttg.memdesc<1x256x64xf16, #shared, #smem, mutable> loc(#loc27)
    %67 = ttg.local_alloc  : () -> !ttg.memdesc<1x64x256xf16, #shared1, #smem, mutable> loc(#loc34)
    %68 = ttg.memdesc_subview %66[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<1x256x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<256x64xf16, #shared, #smem, mutable> loc(#loc27)
    ttg.local_store %34, %68 {OpIdx = #amdgpu.OpIdx<0>} : tensor<256x64xf16, #blocked> -> !ttg.memdesc<256x64xf16, #shared, #smem, mutable> loc(#loc27)
    %69 = ttg.memdesc_subview %67[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x256xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> loc(#loc34)
    ttg.local_store %53, %69 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x256xf16, #blocked1> -> !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> loc(#loc34)
    %70 = ttg.local_load %68 : !ttg.memdesc<256x64xf16, #shared, #smem, mutable> -> tensor<256x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc27)
    %71 = ttg.local_load %69 : !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> -> tensor<64x256xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc34)
    %72 = arith.subi %31, %c2_i32 : i32 loc(#loc26)
    %73:8 = scf.for %arg11 = %c0_i32 to %72 step %c1_i32 iter_args(%arg12 = %cst, %arg13 = %c0_i32, %arg14 = %37, %arg15 = %55, %arg16 = %70, %arg17 = %71, %arg18 = %29, %arg19 = %51) -> (tensor<256x256xf32, #mma>, i32, tensor<256x64xf16, #blocked>, tensor<64x256xf16, #blocked1>, tensor<256x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>>, tensor<64x256xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, !tt.ptr<f16>, !tt.ptr<f16>)  : i32 {

      // global load
      %96 = tt.addptr %arg18, %c64_i32 : !tt.ptr<f16>, i32 loc(#loc24)
      %97 = amdgpu.buffer_load %96[%28] {OpIdx = #amdgpu.OpIdx<0>} : tensor<256x64xf16, #blocked> loc(#loc27)
      %98 = tt.addptr %arg19, %c64_i32 : !tt.ptr<f16>, i32 loc(#loc33)
      %99 = arith.addi %arg13, %c1_i32 : i32 loc(#loc26)
      %100 = arith.cmpi slt, %99, %c1_i32 : i32 loc(#loc26)
      %101 = arith.select %100, %99, %c0_i32 : i32 loc(#loc26)

      // local store
      %102 = ttg.memdesc_subview %66[%101, %c0_i32, %c0_i32] : !ttg.memdesc<1x256x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<256x64xf16, #shared, #smem, mutable> loc(#loc27)
      ttg.local_store %arg14, %102 {OpIdx = #amdgpu.OpIdx<0>} : tensor<256x64xf16, #blocked> -> !ttg.memdesc<256x64xf16, #shared, #smem, mutable> loc(#loc27)
      %103 = ttg.memdesc_subview %67[%101, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x256xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> loc(#loc34)
      ttg.local_store %arg15, %103 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x256xf16, #blocked1> -> !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> loc(#loc34)

      %104 = amdgpu.buffer_load %98[%50] {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x256xf16, #blocked1> loc(#loc34)

      %105 = tt.dot %arg16, %arg17, %arg12 : tensor<256x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<64x256xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<256x256xf32, #mma> loc(#loc52)

      amdgpu.instruction_sched_hint {isBufferLoadsAEnabled = false, isBufferLoadsBEnabled = false, numDsReadsA = #amdgpu.InstCounter<0, none>, numDsReadsB = #amdgpu.InstCounter<0, none>, numDsWritesA = #amdgpu.InstCounter<0, none>, numDsWritesB = #amdgpu.InstCounter<0, none>, numGlobalLoadsA = #amdgpu.InstCounter<0, none>, numGlobalLoadsB = #amdgpu.InstCounter<0, none>, numMMAs = #amdgpu.InstCounter<0, none>} loc(#loc52)

      // local prefetch
      %106 = ttg.local_load %102 : !ttg.memdesc<256x64xf16, #shared, #smem, mutable> -> tensor<256x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc27)
      %107 = ttg.local_load %103 : !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> -> tensor<64x256xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc34)

      scf.yield %105, %101, %97, %104, %106, %107, %96, %98 : tensor<256x256xf32, #mma>, i32, tensor<256x64xf16, #blocked>, tensor<64x256xf16, #blocked1>, tensor<256x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>>, tensor<64x256xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, !tt.ptr<f16>, !tt.ptr<f16> loc(#loc26)
    } loc(#loc26)
    %74 = arith.cmpi sge, %31, %c1_i32 : i32 loc(#loc26)
    %75 = arith.cmpi sge, %31, %c2_i32 : i32 loc(#loc26)
    %76 = arith.addi %73#1, %c1_i32 : i32 loc(#loc26)
    %77 = arith.cmpi slt, %76, %c1_i32 : i32 loc(#loc26)
    %78 = arith.select %77, %76, %c0_i32 : i32 loc(#loc26)
    %79 = ttg.memdesc_subview %66[%78, %c0_i32, %c0_i32] : !ttg.memdesc<1x256x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<256x64xf16, #shared, #smem, mutable> loc(#loc27)
    ttg.local_store %73#2, %79 {OpIdx = #amdgpu.OpIdx<0>} : tensor<256x64xf16, #blocked> -> !ttg.memdesc<256x64xf16, #shared, #smem, mutable> loc(#loc27)
    %80 = ttg.memdesc_subview %67[%78, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x256xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> loc(#loc34)
    ttg.local_store %73#3, %80 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x256xf16, #blocked1> -> !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> loc(#loc34)
    %81 = scf.if %74 -> (tensor<256x256xf32, #mma>) {
      %96 = tt.dot %73#4, %73#5, %73#0 : tensor<256x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<64x256xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<256x256xf32, #mma> loc(#loc52)
      scf.yield %96 : tensor<256x256xf32, #mma> loc(#loc52)
    } else {
      scf.yield %73#0 : tensor<256x256xf32, #mma> loc(#loc52)
    } loc(#loc52)
    %82 = ttg.local_load %79 : !ttg.memdesc<256x64xf16, #shared, #smem, mutable> -> tensor<256x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc27)
    %83 = ttg.local_load %80 : !ttg.memdesc<64x256xf16, #shared1, #smem, mutable> -> tensor<64x256xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc34)
    %84 = arith.select %74, %81, %73#0 : tensor<256x256xf32, #mma> loc(#loc26)
    %85 = scf.if %75 -> (tensor<256x256xf32, #mma>) {
      %96 = tt.dot %82, %83, %84 : tensor<256x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<64x256xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<256x256xf32, #mma> loc(#loc52)
      scf.yield %96 : tensor<256x256xf32, #mma> loc(#loc52)
    } else {
      scf.yield %84 : tensor<256x256xf32, #mma> loc(#loc52)
    } loc(#loc52)
    %86 = arith.select %75, %85, %84 : tensor<256x256xf32, #mma> loc(#loc26)
    ttg.local_dealloc %66 : !ttg.memdesc<1x256x64xf16, #shared, #smem, mutable> loc(#loc26)
    ttg.local_dealloc %67 : !ttg.memdesc<1x64x256xf16, #shared1, #smem, mutable> loc(#loc26)
    %87 = arith.truncf %86 : tensor<256x256xf32, #mma> to tensor<256x256xf16, #mma> loc(#loc53)
    %88 = arith.muli %arg9, %17 : i32 loc(#loc50)
    %89 = tt.splat %arg9 : i32 -> tensor<256x1xi32, #mma> loc(#loc50)
    %90 = arith.muli %89, %64 : tensor<256x1xi32, #mma> loc(#loc50)
    %91 = tt.addptr %arg2, %88 : !tt.ptr<f16>, i32 loc(#loc50)
    %92 = tt.broadcast %90 : tensor<256x1xi32, #mma> -> tensor<256x256xi32, #mma> loc(#loc51)
    %93 = tt.broadcast %65 : tensor<1x256xi32, #mma> -> tensor<256x256xi32, #mma> loc(#loc51)
    %94 = tt.addptr %91, %42 : !tt.ptr<f16>, i32 loc(#loc51)
    %95 = arith.addi %93, %92 : tensor<256x256xi32, #mma> loc(#loc51)
    amdgpu.buffer_store %87, %94[%95] : tensor<256x256xf16, #mma> loc(#loc54)
    tt.return loc(#loc55)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":106:24)
#loc3 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":116:20)
#loc4 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":119:20)
#loc5 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":117:27)
#loc6 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":119:35)
#loc7 = loc("/home/dtanner/repos/triton/python/triton/language/standard.py":40:22)
#loc8 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":109:27)
#loc9 = loc("/home/dtanner/repos/triton/python/triton/language/standard.py":40:28)
#loc10 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":125:42)
#loc11 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":126:26)
#loc12 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":127:33)
#loc13 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":129:38)
#loc14 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":108:27)
#loc15 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":128:39)
#loc16 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":128:52)
#loc17 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":129:58)
#loc18 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":129:31)
#loc19 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":139:23)
#loc20 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":139:51)
#loc21 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":141:21)
#loc22 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":141:52)
#loc23 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":141:59)
#loc24 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":157:18)
#loc25 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":149:36)
#loc26 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":149:25)
#loc27 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":151:24)
#loc28 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":142:28)
#loc29 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":142:21)
#loc30 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":142:51)
#loc31 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":130:44)
#loc32 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":140:23)
#loc33 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":158:18)
#loc34 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":152:24)
#loc35 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":98:26)
#loc36 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":98:14)
#loc37 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":99:14)
#loc38 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":100:14)
#loc39 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":101:26)
#loc40 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":101:14)
#loc41 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":102:26)
#loc42 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":102:14)
#loc43 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":103:14)
#loc44 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":104:28)
#loc45 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":104:14)
#loc46 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":132:22)
#loc47 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":132:14)
#loc48 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":133:22)
#loc49 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":133:14)
#loc50 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":164:21)
#loc51 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":164:52)
#loc52 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":156:33)
#loc53 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":159:23)
#loc54 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":167:25)
#loc55 = loc("/home/dtanner/repos/rocm_triton/golden_ttgir/gemm_sub.py":166:4)
#loc56 = loc(callsite(#loc7 at #loc8))
#loc57 = loc(callsite(#loc9 at #loc8))
#loc58 = loc(callsite(#loc7 at #loc14))
#loc59 = loc(callsite(#loc9 at #loc14))
#loc60 = loc(callsite(#loc7 at #loc25))
#loc61 = loc(callsite(#loc9 at #loc25))
